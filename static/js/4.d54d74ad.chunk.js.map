{"version":3,"sources":["shared/components/UIElements/Map.js","snap/components/SnapItem.js","snap/components/SnapList.js","snap/pages/UserSnaps.js"],"names":["Map","props","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","current","Marker","position","ref","className","style","SnapItem","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","process","id","Authorization","token","onDelete","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","secondary","coordinates","inverse","danger","Card","LoadingSpinner","asOverlay","src","image","alt","title","description","userId","creatorId","to","SnapList","items","length","snap","creator","location","onDeleteSnap","UserSnaps","loadedSnaps","setLoadedSnaps","loadedUser","setLoadedUser","useParams","fetchUser","responseData","user","fetchSnaps","snaps","name","motto","deletedSnapId","prevSnaps","filter"],"mappings":"gOA2BeA,EAxBH,SAACC,GACX,IAAMC,EAASC,mBAEPC,EAAiBH,EAAjBG,OAAQC,EAASJ,EAATI,KAYhB,OAVAC,qBAAU,WAER,IAAMC,EAAM,IAAIC,OAAOC,OAAOC,KAAKV,IAAIE,EAAOS,QAAS,CACrDP,OAAQA,EACRC,KAAMA,IAGR,IAAIG,OAAOC,OAAOC,KAAKE,OAAO,CAAEC,SAAUT,EAAQG,IAAKA,MACtD,CAACH,EAAQC,IAGV,qBACES,IAAKZ,EACLa,UAAS,cAASd,EAAMc,WACxBC,MAAOf,EAAMe,S,sCCkGJC,IA3GE,SAAChB,GAChB,MAAsDiB,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WACjCC,EAAOC,qBAAWC,KACxB,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgDF,oBAAS,GAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KAGMC,EAAkB,kBAAMH,GAAW,IAInCI,EAAsB,WAC1BF,GAAoB,IAEhBG,EAAoB,uCAAG,sBAAAC,EAAA,6DAC3BJ,GAAoB,GADO,kBAInBT,EAAY,GAAD,OACZc,oCADY,kBAC+BlC,EAAMmC,IACpD,SACA,KACA,CAAEC,cAAe,UAAYd,EAAKe,QARX,OAUzBrC,EAAMsC,SAAStC,EAAMmC,IAVI,uGAAH,qDAc1B,OACE,eAAC,WAAD,WACE,cAACI,EAAA,EAAD,CAAYpB,MAAOA,EAAOqB,QAASnB,IACnC,cAACoB,EAAA,EAAD,CACEC,KAAMhB,EACNiB,SAAUb,EACVc,OAAQ5C,EAAM6C,QACdC,aAAa,2BACbC,YAAY,2BACZC,OACE,cAACC,EAAA,EAAD,CAAQC,QAASpB,EAAiBqB,WAAS,EAA3C,mBAPJ,SAYE,qBAAKrC,UAAU,gBAAf,SACE,cAAC,EAAD,CAAKX,OAAQH,EAAMoD,YAAahD,KAAM,SAG1C,cAACqC,EAAA,EAAD,CACEC,KAAMd,EACNe,SAAUZ,EACVa,OAAO,gBACPE,aAAa,2BACbC,YAAY,2BACZC,OACE,eAAC,WAAD,WACE,cAACC,EAAA,EAAD,CAAQC,QAASnB,EAAqBsB,SAAO,EAACF,WAAS,EAAvD,oBAGA,cAACF,EAAA,EAAD,CAAQC,QAASlB,EAAsBsB,QAAM,EAACH,WAAS,EAAvD,uBAXN,SAiBE,2GAKF,eAACI,EAAA,EAAD,CAAMzC,UAAU,YAAhB,UACGI,GAAa,cAACsC,EAAA,EAAD,CAAgBC,WAAS,IACvC,+BACE,qBAAK3C,UAAU,mBAAf,SACE,qBACE4C,IAAG,UAAKxB,gCAAL,YAAwClC,EAAM2D,OAEjDC,IAAK5D,EAAM6D,UAGf,sBAAK/C,UAAU,+BAAf,UACE,sBAAKA,UAAU,qDAAf,UACE,mBAAGA,UAAU,wBAAb,SAAsCd,EAAM6D,QAC5C,mBAAG/C,UAAU,0BAAb,SAAwCd,EAAM6C,UAC9C,mBAAG/B,UAAU,8BAAb,SAA4Cd,EAAM8D,iBAEpD,sBAAKhD,UAAU,8CAAf,UACE,cAACmC,EAAA,EAAD,CAAQC,QAhFG,kBAAMvB,GAAW,IAgFKwB,WAAS,EAA1C,yBAGC7B,EAAKyC,SAAW/D,EAAMgE,WACrB,cAACf,EAAA,EAAD,CAAQgB,GAAE,iBAAYjE,EAAMmC,IAAMgB,WAAS,EAACE,SAAO,EAAnD,kBAID/B,EAAKyC,SAAW/D,EAAMgE,WACrB,cAACf,EAAA,EAAD,CAAQC,QAvFW,WAC/BrB,GAAoB,IAsFmCsB,WAAS,EAACG,QAAM,EAA3D,qC,gCC5GhB,wCAoCeY,IA9BE,SAAClE,GAChB,OAA2B,IAAvBA,EAAMmE,MAAMC,OAEZ,sBAAKtD,UAAU,8CAAf,UACE,kEACA,cAAC,IAAD,CAAQmD,GAAG,aAAad,WAAS,EAAjC,4BAOJ,oBAAIrC,UAAU,aAAd,SACGd,EAAMmE,MAAM7D,KAAI,SAAC+D,GAAD,OACf,cAAC,IAAD,CAEElC,GAAIkC,EAAKlC,GACTwB,MAAOU,EAAKV,MACZE,MAAOQ,EAAKR,MACZC,YAAaO,EAAKP,YAClBjB,QAASwB,EAAKxB,QACdmB,UAAWK,EAAKC,QAChBlB,YAAaiB,EAAKE,SAClBjC,SAAUtC,EAAMwE,cARXH,EAAKlC,W,0LCuDLsC,UAjEG,WAChB,MAAsDxD,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WAEvC,EAAsCI,qBAAtC,mBAAOiD,EAAP,KAAoBC,EAApB,KACA,EAAoClD,qBAApC,mBAAOmD,EAAP,KAAmBC,EAAnB,KACMd,EAASe,cAAYf,OAE3B1D,qBAAU,WAER,IAAM0E,EAAS,uCAAG,4BAAA9C,EAAA,+EAEab,EAAY,GAAD,OACjCc,oCADiC,kBACU6B,IAHlC,OAERiB,EAFQ,OAKdH,EAAcG,EAAaC,MALb,uGAAH,qDAQfF,IAIA,IAAMG,EAAU,uCAAG,4BAAAjD,EAAA,+EAEYb,EAAY,GAAD,OACjCc,oCADiC,uBACe6B,IAHtC,OAETiB,EAFS,OAKfL,EAAeK,EAAaG,OALb,uGAAH,qDAQhBD,MACC,CAAC9D,EAAa2C,IAQjB,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CAAY5C,MAAOA,EAAOqB,QAASnB,IAClCH,GACC,qBAAKJ,UAAU,cAAf,SACE,cAAC,IAAD,OAGFI,GAAa0D,GACb,sBAAK9D,UAAU,+CAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,cAAC,IAAD,CACE6C,MAAK,UAAKzB,gCAAL,YAAwC0C,EAAWjB,WAG5D,mBAAG7C,UAAU,kBAAb,SAAgC8D,EAAWQ,OAC3C,mBAAGtE,UAAU,kBAAb,SAAgC8D,EAAWS,YAG7CnE,GAAawD,GACb,cAAC,IAAD,CAAUP,MAAOO,EAAaF,aA1BT,SAACc,GAC1BX,GAAe,SAACY,GAAD,OACbA,EAAUC,QAAO,SAACnB,GAAD,OAAUA,EAAKlC,KAAOmD,WAKzC","file":"static/js/4.d54d74ad.chunk.js","sourcesContent":["import { useRef, useEffect } from 'react';\nimport './Map.css';\n\nconst Map = (props) => {\n  const mapRef = useRef();\n\n  const { center, zoom } = props;\n\n  useEffect(() => {\n    // 1) Create a map\n    const map = new window.google.maps.Map(mapRef.current, {\n      center: center,\n      zoom: zoom,\n    });\n    // 2) Place a marker\n    new window.google.maps.Marker({ position: center, map: map });\n  }, [center, zoom]);\n\n  return (\n    <div\n      ref={mapRef}\n      className={`map ${props.className}`}\n      style={props.style}\n    ></div>\n  );\n};\n\nexport default Map;\n","import { Fragment, useState, useContext } from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Button from '../../shared/components/FormElements/Button';\nimport Modal from '../../shared/components/UIElements/Modal';\nimport Map from '../../shared/components/UIElements/Map';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\nimport './SnapItem.css';\n\nconst SnapItem = (props) => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const auth = useContext(AuthContext);\n  const [showMap, setShowMap] = useState(false);\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  const openMapHandler = () => setShowMap(true);\n  const closeMapHandler = () => setShowMap(false);\n  const showDeleteWarningHandler = () => {\n    setShowConfirmModal(true);\n  };\n  const cancelDeleteHandler = () => {\n    setShowConfirmModal(false);\n  };\n  const confirmDeleteHandler = async () => {\n    setShowConfirmModal(false);\n\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/snaps/${props.id}`,\n        'DELETE',\n        null,\n        { Authorization: 'Bearer ' + auth.token }\n      );\n      props.onDelete(props.id);\n    } catch (err) {}\n  };\n\n  return (\n    <Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Modal\n        show={showMap}\n        onCancel={closeMapHandler}\n        header={props.address}\n        contentClass='snap-item__modal-content'\n        footerClass='snap-item__modal-actions'\n        footer={\n          <Button onClick={closeMapHandler} secondary>\n            Close\n          </Button>\n        }\n      >\n        <div className='map-container'>\n          <Map center={props.coordinates} zoom={14} />\n        </div>\n      </Modal>\n      <Modal\n        show={showConfirmModal}\n        onCancel={cancelDeleteHandler}\n        header='Are you sure?'\n        contentClass='snap-item__modal-content'\n        footerClass='snap-item__modal-actions'\n        footer={\n          <Fragment>\n            <Button onClick={cancelDeleteHandler} inverse secondary>\n              Cancel\n            </Button>\n            <Button onClick={confirmDeleteHandler} danger secondary>\n              Delete\n            </Button>\n          </Fragment>\n        }\n      >\n        <p>\n          Do you want to proceed and delete this snap? You can't undo this\n          action.\n        </p>\n      </Modal>\n      <Card className='snap-item'>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <li>\n          <div className='snap-item__image'>\n            <img\n              src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`}\n              // src='http://localhost:8000/uploads/images/5d727aa0-48ca-11ec-96e6-258a17f4d3f7.jpeg'\n              alt={props.title}\n            />\n          </div>\n          <div className='center-flex-column small-gap'>\n            <div className='center-flex-column extra-small-gap snap-item__info'>\n              <p className='snap-item__info-title'>{props.title}</p>\n              <p className='snap-item__info-address'>{props.address}</p>\n              <p className='snap-item__info-description'>{props.description}</p>\n            </div>\n            <div className='center-flex-row tiny-gap snap-item__actions'>\n              <Button onClick={openMapHandler} secondary>\n                View on Map\n              </Button>\n              {auth.userId === props.creatorId && (\n                <Button to={`/snaps/${props.id}`} secondary inverse>\n                  Edit\n                </Button>\n              )}\n              {auth.userId === props.creatorId && (\n                <Button onClick={showDeleteWarningHandler} secondary danger>\n                  Delete\n                </Button>\n              )}\n            </div>\n          </div>\n        </li>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default SnapItem;\n","import SnapItem from './SnapItem';\nimport Button from '../../shared/components/FormElements/Button';\n\nimport '../../index.css';\nimport './SnapList.css';\n\nconst SnapList = (props) => {\n  if (props.items.length === 0) {\n    return (\n      <div className='center-flex-column medium-gap no-data-found'>\n        <p>No snaps found. Maybe create one?</p>\n        <Button to='/snaps/new' secondary>\n          Create Snap\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <ul className='snaps-list'>\n      {props.items.map((snap) => (\n        <SnapItem\n          key={snap.id}\n          id={snap.id}\n          image={snap.image}\n          title={snap.title}\n          description={snap.description}\n          address={snap.address}\n          creatorId={snap.creator}\n          coordinates={snap.location}\n          onDelete={props.onDeleteSnap}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default SnapList;\n","import { Fragment, useState, useEffect } from 'react';\nimport { useParams } from 'react-router';\n\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport SnapList from '../components/SnapList';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport Avatar from '../../shared/components/UIElements/Avatar';\n\nimport './UserSnaps.css';\n\nconst UserSnaps = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [loadedSnaps, setLoadedSnaps] = useState();\n  const [loadedUser, setLoadedUser] = useState();\n  const userId = useParams().userId;\n\n  useEffect(() => {\n    // 1) FETCH USER\n    const fetchUser = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/users/${userId}`\n        );\n        setLoadedUser(responseData.user);\n      } catch (err) {}\n    };\n    fetchUser();\n\n    // 2) FETCH SNAPS\n    // http://localhost:8000/api/snaps/user/:uid\n    const fetchSnaps = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/snaps/user/${userId}`\n        );\n        setLoadedSnaps(responseData.snaps);\n      } catch (err) {}\n    };\n    fetchSnaps();\n  }, [sendRequest, userId]);\n\n  const snapDeletedHandler = (deletedSnapId) => {\n    setLoadedSnaps((prevSnaps) =>\n      prevSnaps.filter((snap) => snap.id !== deletedSnapId)\n    );\n  };\n\n  return (\n    <Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className='center-text'>\n          <LoadingSpinner />\n        </div>\n      )}\n      {!isLoading && loadedUser && (\n        <div className='user-info center-flex-column extra-small-gap'>\n          <div className='user-info__image'>\n            <Avatar\n              image={`${process.env.REACT_APP_ASSET_URL}/${loadedUser.image}`}\n            />\n          </div>\n          <p className='user-info__name'>{loadedUser.name}</p>\n          <p className='user-info__text'>{loadedUser.motto}</p>\n        </div>\n      )}\n      {!isLoading && loadedSnaps && (\n        <SnapList items={loadedSnaps} onDeleteSnap={snapDeletedHandler} />\n      )}\n      ;\n    </Fragment>\n  );\n};\n\nexport default UserSnaps;\n"],"sourceRoot":""}