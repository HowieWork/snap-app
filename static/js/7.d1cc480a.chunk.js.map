{"version":3,"sources":["shared/components/UIElements/Map.js","snap/components/SnapItem.js","snap/pages/RandomSnap.js"],"names":["Map","props","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","current","Marker","position","ref","className","style","SnapItem","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","process","id","Authorization","token","onDelete","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","secondary","coordinates","inverse","danger","Card","LoadingSpinner","asOverlay","src","image","alt","title","description","userId","creatorId","to","RandomSnap","loadedSnap","setLoadedSnap","fetchSnap","useCallback","responseData","snap","primary","type","size","creator","location"],"mappings":"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","file":"static/js/7.d1cc480a.chunk.js","sourcesContent":["import { useRef, useEffect } from 'react';\nimport './Map.css';\n\nconst Map = (props) => {\n  const mapRef = useRef();\n\n  const { center, zoom } = props;\n\n  useEffect(() => {\n    // 1) Create a map\n    const map = new window.google.maps.Map(mapRef.current, {\n      center: center,\n      zoom: zoom,\n    });\n    // 2) Place a marker\n    new window.google.maps.Marker({ position: center, map: map });\n  }, [center, zoom]);\n\n  return (\n    <div\n      ref={mapRef}\n      className={`map ${props.className}`}\n      style={props.style}\n    ></div>\n  );\n};\n\nexport default Map;\n","import { Fragment, useState, useContext } from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Button from '../../shared/components/FormElements/Button';\nimport Modal from '../../shared/components/UIElements/Modal';\nimport Map from '../../shared/components/UIElements/Map';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\nimport './SnapItem.css';\n\nconst SnapItem = (props) => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const auth = useContext(AuthContext);\n  const [showMap, setShowMap] = useState(false);\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  const openMapHandler = () => setShowMap(true);\n  const closeMapHandler = () => setShowMap(false);\n  const showDeleteWarningHandler = () => {\n    setShowConfirmModal(true);\n  };\n  const cancelDeleteHandler = () => {\n    setShowConfirmModal(false);\n  };\n  const confirmDeleteHandler = async () => {\n    setShowConfirmModal(false);\n    // console.log('DELETING...');\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/snaps/${props.id}`,\n        'DELETE',\n        null,\n        { Authorization: 'Bearer ' + auth.token }\n      );\n      props.onDelete(props.id);\n    } catch (err) {}\n  };\n\n  return (\n    <Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Modal\n        show={showMap}\n        onCancel={closeMapHandler}\n        header={props.address}\n        contentClass='snap-item__modal-content'\n        footerClass='snap-item__modal-actions'\n        footer={\n          <Button onClick={closeMapHandler} secondary>\n            Close\n          </Button>\n        }\n      >\n        <div className='map-container'>\n          <Map center={props.coordinates} zoom={14} />\n        </div>\n      </Modal>\n      <Modal\n        show={showConfirmModal}\n        onCancel={cancelDeleteHandler}\n        header='Are you sure?'\n        contentClass='snap-item__modal-content'\n        footerClass='snap-item__modal-actions'\n        footer={\n          <Fragment>\n            <Button onClick={cancelDeleteHandler} inverse secondary>\n              Cancel\n            </Button>\n            <Button onClick={confirmDeleteHandler} danger secondary>\n              Delete\n            </Button>\n          </Fragment>\n        }\n      >\n        <p>\n          Do you want to proceed and delete this snap? You can't undo this\n          action.\n        </p>\n      </Modal>\n      <Card className='snap-item'>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <li>\n          <div className='snap-item__image'>\n            <img\n              src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`}\n              // src='http://localhost:8000/uploads/images/5d727aa0-48ca-11ec-96e6-258a17f4d3f7.jpeg'\n              alt={props.title}\n            />\n          </div>\n          <div className='center-flex-column small-gap'>\n            <div className='center-flex-column extra-small-gap snap-item__info'>\n              <p className='snap-item__info-title'>{props.title}</p>\n              <p className='snap-item__info-address'>{props.address}</p>\n              <p className='snap-item__info-description'>{props.description}</p>\n            </div>\n            <div className='center-flex-row tiny-gap snap-item__actions'>\n              <Button onClick={openMapHandler} secondary>\n                View on Map\n              </Button>\n              {auth.userId === props.creatorId && (\n                <Button to={`/snaps/${props.id}`} secondary inverse>\n                  Edit\n                </Button>\n              )}\n              {auth.userId === props.creatorId && (\n                <Button onClick={showDeleteWarningHandler} secondary danger>\n                  Delete\n                </Button>\n              )}\n            </div>\n          </div>\n        </li>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default SnapItem;\n","import { useState, useEffect, useCallback } from 'react';\n\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport SnapItem from '../components/SnapItem';\nimport Button from '../../shared/components/FormElements/Button';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\n\nimport './RandomSnap.css';\n\nconst RandomSnap = () => {\n  const { isLoading, sendRequest } = useHttpClient();\n\n  const [loadedSnap, setLoadedSnap] = useState();\n\n  const fetchSnap = useCallback(async () => {\n    try {\n      const responseData = await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/snaps/random`\n      );\n      setLoadedSnap(responseData.snap);\n    } catch (err) {}\n  }, [sendRequest]);\n\n  const randomSnapHandler = () => {\n    fetchSnap();\n  };\n\n  useEffect(() => {\n    // FETCH A RANDOM SNAP\n    fetchSnap();\n  }, [fetchSnap]);\n\n  return (\n    <div className='center-flex-column'>\n      <div className='center-text random-hero center-flex-column extra-small-gap'>\n        <p className='random-hero-text'>\n          Here is your randomly generated snap.\n        </p>\n        <Button\n          primary\n          inverse\n          type='button'\n          size='medium'\n          onClick={randomSnapHandler}\n        >\n          Try again\n        </Button>\n      </div>\n\n      {isLoading && (\n        <div className='center-text'>\n          <LoadingSpinner />\n        </div>\n      )}\n\n      {!isLoading && !loadedSnap && (\n        <p className='center-text no-data-found'>\n          Something went wrong. Please try again.\n        </p>\n      )}\n\n      {/* {!isLoading && loadedSnap && <SnapList items={loadedSnap} />} */}\n      {!isLoading && loadedSnap && (\n        <ul className='random-snap'>\n          {loadedSnap.map((snap) => (\n            <SnapItem\n              key={snap.id}\n              id={snap.id}\n              image={snap.image}\n              title={snap.title}\n              description={snap.description}\n              address={snap.address}\n              creatorId={snap.creator}\n              coordinates={snap.location}\n              onDelete=''\n            />\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default RandomSnap;\n"],"sourceRoot":""}