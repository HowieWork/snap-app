{"version":3,"sources":["shared/components/FormElements/Input.js","shared/hooks/form-hook.js","shared/components/FormElements/ImageUpload.js","snap/pages/NewSnap.js"],"names":["inputReducer","state","action","type","value","val","isValid","validate","validators","isTouched","Input","props","useReducer","initialValue","initialIsValid","inputState","dispatch","id","onInput","useEffect","changeHandler","event","target","touchHandler","element","placeholder","onChange","onBlur","rows","className","htmlFor","label","errorText","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","formValidity","formState","inputHandler","useCallback","setFormData","inputData","ImageUpload","useState","file","setFile","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","fileReader","FileReader","onload","result","readAsDataURL","style","display","accept","ref","pickedFile","fileIsValid","files","length","center","src","alt","secondary","onClick","current","click","NewSnap","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","title","description","address","image","history","useHistory","snapSubmitHandler","a","preventDefault","console","log","formData","FormData","append","process","Authorization","token","push","onClear","asOverlay","onSubmit","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","disabled"],"mappings":"sJAMMA,EAAe,SAACC,EAAOC,GAC3B,OAAQA,EAAOC,MACb,IAAK,SACH,OAAO,2BACFF,GADL,IAEEG,MAAOF,EAAOG,IACdC,QAASC,YAASL,EAAOG,IAAKH,EAAOM,cAEzC,IAAK,QACH,OAAO,2BACFP,GADL,IAEEQ,WAAW,IAGf,QACE,OAAOR,IA8DES,IA1DD,SAACC,GACb,MAA+BC,qBAAWZ,EAAc,CACtDI,MAAOO,EAAME,cAAgB,GAC7BJ,WAAW,EACXH,QAASK,EAAMG,iBAAkB,IAHnC,mBAAOC,EAAP,KAAmBC,EAAnB,KAMQC,EAAgBN,EAAhBM,GAAIC,EAAYP,EAAZO,QACJd,EAAmBW,EAAnBX,MAAOE,EAAYS,EAAZT,QAEfa,qBAAU,WACRD,EAAQD,EAAIb,EAAOE,KAClB,CAACW,EAAIb,EAAOE,EAASY,IAExB,IAAME,EAAgB,SAACC,GACrBL,EAAS,CACPb,KAAM,SACNE,IAAKgB,EAAMC,OAAOlB,MAClBI,WAAYG,EAAMH,cAGhBe,EAAe,WACnBP,EAAS,CAAEb,KAAM,WAGbqB,EACc,UAAlBb,EAAMa,QACJ,uBACEP,GAAIN,EAAMM,GACVd,KAAMQ,EAAMR,KACZsB,YAAad,EAAMc,YACnBC,SAAUN,EACVO,OAAQJ,EACRnB,MAAOW,EAAWX,QAGpB,0BACEa,GAAIN,EAAMM,GACVW,KAAMjB,EAAMiB,MAAQ,EACpBF,SAAUN,EACVO,OAAQJ,EACRnB,MAAOW,EAAWX,QAIxB,OACE,sBACEyB,UAAS,wBACNd,EAAWT,SAAWS,EAAWN,WAAa,yBAFnD,UAKE,uBAAOqB,QAASnB,EAAMM,GAAtB,SAA2BN,EAAMoB,QAChCP,GACCT,EAAWT,SAAWS,EAAWN,WAAa,4BAAIE,EAAMqB,iB,yHC5E1DC,EAAc,SAAChC,EAAOC,GAC1B,OAAQA,EAAOC,MACb,IAAK,eACH,IAAI+B,GAAc,EAClB,IAAK,IAAMC,KAAWlC,EAAMmC,OAErBnC,EAAMmC,OAAOD,KAIhBD,EADEC,IAAYjC,EAAOiC,QACPD,GAAehC,EAAOI,QAEtB4B,GAAejC,EAAMmC,OAAOD,GAAS7B,SAGvD,OAAO,2BACFL,GADL,IAEEmC,OAAO,2BACFnC,EAAMmC,QADL,kBAEHlC,EAAOiC,QAAU,CAAE/B,MAAOF,EAAOE,MAAOE,QAASJ,EAAOI,WAE3DA,QAAS4B,IAEb,IAAK,WACH,MAAO,CACLE,OAAQlC,EAAOkC,OACf9B,QAASJ,EAAOI,SAEpB,QACE,OAAOL,IAIAoC,EAAU,SAACC,EAAeC,GACrC,MAA8B3B,qBAAWqB,EAAa,CACpDG,OAAQE,EACRhC,QAASiC,IAFX,mBAAOC,EAAP,KAAkBxB,EAAlB,KAKMyB,EAAeC,uBAAY,SAACzB,EAAIb,EAAOE,GAC3CU,EAAS,CACPb,KAAM,eACNC,MAAOA,EACPE,QAASA,EACT6B,QAASlB,MAEV,IAEG0B,EAAcD,uBAAY,SAACE,EAAWL,GAC1CvB,EAAS,CACPb,KAAM,WACNiC,OAAQQ,EACRtC,QAASiC,MAEV,IAEH,MAAO,CAACC,EAAWC,EAAcE,K,wECiBpBE,IAvEK,SAAClC,GACnB,MAAwBmC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAoCF,qBAApC,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOxC,EAAP,KAAgB6C,EAAhB,KAEMC,EAAgBC,mBAwCtB,OAZAlC,qBAAU,WACR,GAAK4B,EAAL,CAGA,IAAMO,EAAa,IAAIC,WAEvBD,EAAWE,OAAS,WAClBN,EAAcI,EAAWG,SAE3BH,EAAWI,cAAcX,MACxB,CAACA,IAGF,sBAAKlB,UAAU,eAAf,UAEE,uBACEZ,GAAIN,EAAMM,GACV0C,MAAO,CAAEC,QAAS,QAClBzD,KAAK,OACL0D,OAAO,wBACPC,IAAKV,EACL1B,SA1CgB,SAACL,GAIrB,IAAI0C,EAGAC,EAAc1D,EACde,EAAMC,OAAO2C,OAAuC,IAA9B5C,EAAMC,OAAO2C,MAAMC,QAC3CH,EAAa1C,EAAMC,OAAO2C,MAAM,GAChCjB,EAAQe,GACRZ,GAAW,GACXa,GAAc,IAEdb,GAAW,GACXa,GAAc,GAGhBrD,EAAMO,QAAQP,EAAMM,GAAI8C,EAAYC,MA0BlC,sBAAKnC,UAAS,UAAKlB,EAAMwD,QAAU,sBAAnC,UACE,sBAAKtC,UAAU,wBAAf,UACGoB,GAAc,qBAAKmB,IAAKnB,EAAYoB,IAAI,aACvCpB,GAAc,yDAElB,cAAC,IAAD,CAAQ9C,KAAK,SAASmE,WAAS,EAACC,QAtDb,WAEvBnB,EAAcoB,QAAQC,SAoDlB,yBAIEnE,GAAW,4BAAIK,EAAMqB,oB,iOC4DhB0C,UA7GC,WACd,MAAsDC,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WACjCC,EAAOC,qBAAWC,KACxB,EAAkC7C,YAChC,CACE8C,MAAO,CACL/E,MAAO,GACPE,SAAS,GAEX8E,YAAa,CACXhF,MAAO,GACPE,SAAS,GAEX+E,QAAS,CACPjF,MAAO,GACPE,SAAS,GAEXgF,MAAO,CACLlF,MAAO,KACPE,SAAS,KAGb,GAnBF,mBAAOkC,EAAP,KAAkBC,EAAlB,KAuBM8C,EAAUC,cAGVC,EAAiB,uCAAG,WAAOpE,GAAP,eAAAqE,EAAA,6DACxBrE,EAAMsE,iBAENC,QAAQC,IAAIrD,EAAUJ,QAHE,UAOhB0D,EAAW,IAAIC,UACZC,OAAO,QAASxD,EAAUJ,OAAO+C,MAAM/E,OAChD0F,EAASE,OAAO,cAAexD,EAAUJ,OAAOgD,YAAYhF,OAC5D0F,EAASE,OAAO,UAAWxD,EAAUJ,OAAOiD,QAAQjF,OAGpD0F,EAASE,OAAO,QAASxD,EAAUJ,OAAOkD,MAAMlF,OAb1B,UAiBhB0E,EAAY,GAAD,OACZmB,2CADY,WAEf,OACAH,EACA,CAAEI,cAAe,UAAYlB,EAAKmB,QArBd,QAgCtBZ,EAAQa,KAAK,KAhCS,4GAAH,sDAoCvB,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CAAYvB,MAAOA,EAAOwB,QAAStB,IACnC,eAAC,IAAD,CAAMlD,UAAU,YAAhB,UACG+C,GAAa,cAAC,IAAD,CAAgB0B,WAAS,IACvC,uBAAMC,SAAUd,EAAhB,UACE,cAAC,IAAD,CACExE,GAAG,QACHO,QAAQ,QACRrB,KAAK,OACL4B,MAAM,QACNN,YAAY,kCACZO,UAAU,8BACVxB,WAAY,CAACgG,eACbtF,QAASuB,IAEX,cAAC,IAAD,CAAaxB,GAAG,QAAQkD,QAAM,EAACnC,UAAU,GAAGd,QAASuB,IACrD,cAAC,IAAD,CACExB,GAAG,cACHO,QAAQ,WACRI,KAAK,IACLG,MAAM,cACNvB,WAAY,CAACiG,YAAoB,IACjCzE,UAAU,4DACVd,QAASuB,IAEX,cAAC,IAAD,CACExB,GAAG,UACHO,QAAQ,QACRO,MAAM,UACNN,YAAY,oCACZjB,WAAY,CAACgG,eACbxE,UAAU,gCACVd,QAASuB,IAEX,cAAC,IAAD,CAAQtC,KAAK,SAASmE,WAAS,EAACoC,UAAWlE,EAAUlC,QAArD","file":"static/js/5.cb4258c3.chunk.js","sourcesContent":["import { useReducer, useEffect } from 'react';\n\nimport { validate } from '../../util/validators';\n\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      };\n    case 'TOUCH': {\n      return {\n        ...state,\n        isTouched: true,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst Input = (props) => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialIsValid || false,\n  });\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = (event) => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators,\n    });\n  };\n  const touchHandler = () => {\n    dispatch({ type: 'TOUCH' });\n  };\n\n  const element =\n    props.element === 'input' ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 5}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${\n        !inputState.isValid && inputState.isTouched && 'form-control--invalid'\n      }`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import { useReducer, useCallback } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        // FIXING 'NAME'/'IMAGE' COULD BE UNDEFINED WHEN IN LOG IN MODE\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid: formIsValid,\n      };\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.isValid,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, formValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: formValidity,\n  });\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id,\n    });\n  }, []);\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      isValid: formValidity,\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};\n","import { useRef, useState, useEffect } from 'react';\nimport Button from './Button';\nimport './ImageUpload.css';\n\nconst ImageUpload = (props) => {\n  const [file, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const [isValid, setIsValid] = useState(false);\n\n  const filePickerRef = useRef();\n\n  const pickImageHandler = () => {\n    // DOM ELEMENT CLICK\n    filePickerRef.current.click();\n  };\n\n  const pickedHandler = (event) => {\n    // EVENT.TARGET.FILES CONTAINS UPLOADED FILE INFO\n    // console.log(event.target.files);\n\n    let pickedFile;\n\n    // USE FILEISVALID VARIABLE IN CASE SETISVALID HAPPENS AFTER EXECUATION OF PROPS.ONINPUT\n    let fileIsValid = isValid;\n    if (event.target.files && event.target.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n\n    props.onInput(props.id, pickedFile, fileIsValid);\n  };\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n    const fileReader = new FileReader();\n    // LOAD EVENT TRIGGERED EACH TIME THE READING IS COMPLETED\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n    fileReader.readAsDataURL(file);\n  }, [file]);\n\n  return (\n    <div className='form-control'>\n      {/* NOT SHOW INPUT UNLESS CLICK BUTTON */}\n      <input\n        id={props.id}\n        style={{ display: 'none' }}\n        type='file'\n        accept='.jpg,.png,.jpeg,.webp'\n        ref={filePickerRef}\n        onChange={pickedHandler}\n      />\n      <div className={`${props.center && 'center-flex-column'}`}>\n        <div className='image-upload__preview'>\n          {previewUrl && <img src={previewUrl} alt='preview' />}\n          {!previewUrl && <p>Please pick an image.</p>}\n        </div>\n        <Button type='button' secondary onClick={pickImageHandler}>\n          Pick image\n        </Button>\n        {/* FIXME HAVEN'T SHOW ERROR TEXT YET */}\n        {!isValid && <p>{props.errorText}</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","import { Fragment, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\n\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\n\nimport './SnapForm.css';\n\nconst NewSnap = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const auth = useContext(AuthContext);\n  const [formState, inputHandler] = useForm(\n    {\n      title: {\n        value: '',\n        isValid: false,\n      },\n      description: {\n        value: '',\n        isValid: false,\n      },\n      address: {\n        value: '',\n        isValid: false,\n      },\n      image: {\n        value: null,\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  // REDIRECT USER TO A DIFFERENT PAGE\n  const history = useHistory();\n\n  // Submitting form\n  const snapSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    console.log(formState.inputs);\n\n    try {\n      // REQUEST BODY: FORMDATA\n      const formData = new FormData();\n      formData.append('title', formState.inputs.title.value);\n      formData.append('description', formState.inputs.description.value);\n      formData.append('address', formState.inputs.address.value);\n      // NOTE NO NEED APPEND CREATOR, SINCE RELAVANT INFO WILL BE PROVIDED BY REQUEST USERDATA BACKEND\n      // formData.append('creator', auth.userId);\n      formData.append('image', formState.inputs.image.value);\n\n      // POST REQUEST TO BACKEND\n      // http://localhost:8000/api/snaps/\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/snaps/`,\n        'POST',\n        formData,\n        { Authorization: 'Bearer ' + auth.token }\n        // JSON.stringify({\n        //   title: formState.inputs.title.value,\n        //   description: formState.inputs.description.value,\n        //   address: formState.inputs.address.value,\n        //   creator: auth.userId,\n        // }),\n        // { 'Content-Type': 'application/json' }\n      );\n\n      // REDIRECT USER TO A DIFFERENT PAGE\n      history.push('/');\n    } catch (err) {}\n  };\n\n  return (\n    <Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className='snap-form'>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <form onSubmit={snapSubmitHandler}>\n          <Input\n            id='title'\n            element='input'\n            type='text'\n            label='Title'\n            placeholder='This is a placeholder for Title'\n            errorText='Please enter a valid title.'\n            validators={[VALIDATOR_REQUIRE()]}\n            onInput={inputHandler}\n          />\n          <ImageUpload id='image' center errorText='' onInput={inputHandler} />\n          <Input\n            id='description'\n            element='textarea'\n            rows='5'\n            label='Description'\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText='Please enter a valid description (at least 5 characters).'\n            onInput={inputHandler}\n          />\n          <Input\n            id='address'\n            element='input'\n            label='Address'\n            placeholder='This is a placeholder for Address'\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText='Please enter a valid address.'\n            onInput={inputHandler}\n          />\n          <Button type='submit' secondary disabled={!formState.isValid}>\n            Add Snap\n          </Button>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default NewSnap;\n"],"sourceRoot":""}